// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: AnalizadorLexico.flex

package Backend;

import java.util.ArrayList;
import java.util.List;


@SuppressWarnings("fallthrough")
public class AnalizadorLexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\6\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\3\u0100\1\u0e00\205\u0100\1\u0600\1\u0100\1\u0f00\1\u1000\1\u1100"+
    "\1\u1200\54\u0100\10\u1300\37\u0100\1\u0900\4\u0100\1\u1400\10\u0100"+
    "\1\u1500\2\u0100\1\u1600\1\u1700\1\u1200\1\u0100\1\u0500\1\u0100"+
    "\1\u1800\1\u1500\1\u0800\3\u0100\1\u1100\1\u1900\114\u0100\1\u1a00"+
    "\1\u1100\153\u0100\1\u1b00\11\u0100\1\u1c00\1\u1200\6\u0100\1\u1100"+
    "\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\2\3\1\2\22\0\1\1\6\0"+
    "\1\4\2\5\2\6\1\5\1\7\1\5\1\6\1\10"+
    "\1\11\1\12\1\13\6\14\1\0\1\5\1\15\1\16"+
    "\1\15\2\0\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\5\0\1\50\1\0\32\51\12\0"+
    "\1\3\u01da\0\12\52\206\0\12\52\306\0\12\52\234\0"+
    "\12\52\166\0\12\52\140\0\12\52\166\0\12\52\106\0"+
    "\12\52\u0116\0\12\52\106\0\12\52\u0146\0\12\52\46\0"+
    "\12\52\u012c\0\12\52\200\0\12\52\246\0\12\52\6\0"+
    "\12\52\266\0\12\52\126\0\12\52\206\0\12\52\6\0"+
    "\12\52\316\0\2\3\u01a6\0\12\52\46\0\12\52\306\0"+
    "\12\52\26\0\12\52\126\0\12\52\u0196\0\12\52\6\0"+
    "\u0100\3\240\0\12\52\206\0\12\52\u012c\0\12\52\200\0"+
    "\12\52\74\0\12\52\220\0\12\52\166\0\12\52\146\0"+
    "\12\52\206\0\12\52\106\0\12\52\266\0\12\52\u0164\0"+
    "\62\52\100\0\12\52\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7424];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\5\1\6"+
    "\1\7\1\10\25\1\1\11\1\0\1\12\1\0\1\13"+
    "\2\0\1\11\1\7\3\0\1\14\3\0\1\15\13\0"+
    "\1\16\10\0\1\17\1\20\16\0\2\21\1\22\1\0"+
    "\1\20\1\23\1\24\24\0\1\25\1\0\1\26\1\27"+
    "\6\0\1\30\1\31\23\0\1\32\2\0\1\33\1\34"+
    "\3\0\1\35\3\0\1\36\1\37\1\0\1\40\6\0"+
    "\1\41\1\42\1\43\6\0\1\44\5\0\1\45\4\0"+
    "\1\46\1\47\1\0\1\50\2\0\1\51\1\52\4\0"+
    "\1\53\4\0\1\54\1\0\1\55\2\0\1\56\1\0"+
    "\1\57\2\0\1\60\1\0\1\61\3\0\1\62\1\63"+
    "\1\64\1\65\1\66\3\0\1\67\1\70\2\0\1\71"+
    "\1\72\1\73\1\74\1\0\1\75\2\0\1\76\7\0"+
    "\1\77\1\100\1\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\53\0\53\0\126\0\53\0\53\0\201"+
    "\0\254\0\327\0\53\0\u0102\0\u012d\0\u0158\0\u0183\0\u01ae"+
    "\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306"+
    "\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e"+
    "\0\u0489\0\u04b4\0\53\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b"+
    "\0\53\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8"+
    "\0\53\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5"+
    "\0\u0810\0\u083b\0\u0866\0\u0891\0\53\0\u08bc\0\u08e7\0\u0912"+
    "\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\53\0\u0a14\0\u0a3f"+
    "\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97"+
    "\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0535\0\u058b\0\53"+
    "\0\u0c99\0\53\0\53\0\53\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"+
    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d"+
    "\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5"+
    "\0\53\0\u1020\0\53\0\53\0\u104b\0\u1076\0\u10a1\0\u10cc"+
    "\0\u10f7\0\u1122\0\53\0\53\0\u114d\0\u1178\0\u11a3\0\u11ce"+
    "\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326"+
    "\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u1453\0\53"+
    "\0\u147e\0\u14a9\0\53\0\53\0\u14d4\0\u14ff\0\u152a\0\53"+
    "\0\u1555\0\u1580\0\u15ab\0\53\0\53\0\u15d6\0\53\0\u1601"+
    "\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\53\0\53\0\53"+
    "\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\53\0\u1805"+
    "\0\u1830\0\u185b\0\u1886\0\u18b1\0\53\0\u18dc\0\u1907\0\u1932"+
    "\0\u195d\0\53\0\53\0\u1988\0\53\0\u19b3\0\u19de\0\53"+
    "\0\53\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\53\0\u1ab5\0\u1ae0"+
    "\0\u1b0b\0\u1b36\0\53\0\u1b61\0\53\0\u1b8c\0\u1bb7\0\53"+
    "\0\u1be2\0\53\0\u1c0d\0\u1c38\0\53\0\u1c63\0\53\0\u1c8e"+
    "\0\u1cb9\0\u1ce4\0\53\0\53\0\53\0\53\0\53\0\u1d0f"+
    "\0\u1d3a\0\u1d65\0\53\0\53\0\u1d90\0\u1dbb\0\53\0\53"+
    "\0\53\0\53\0\u1de6\0\53\0\u1e11\0\u1e3c\0\53\0\u1e67"+
    "\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\53\0\53"+
    "\0\u1f94\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\5\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\2\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\2\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\3\2\1\41\1\2\53\0\4\42\1\43\3\42"+
    "\5\44\35\42\1\44\7\0\1\45\43\0\2\46\2\0"+
    "\4\46\5\11\33\46\1\47\1\50\1\46\16\0\1\51"+
    "\56\0\1\52\7\0\1\53\1\0\1\54\4\0\1\55"+
    "\2\0\1\56\35\0\1\57\5\0\1\60\11\0\1\61"+
    "\22\0\1\62\15\0\1\63\2\0\1\64\31\0\1\65"+
    "\3\0\1\66\14\0\1\67\60\0\1\70\23\0\1\71"+
    "\15\0\1\72\2\0\1\73\52\0\1\74\36\0\1\75"+
    "\7\0\1\76\53\0\1\77\40\0\1\100\56\0\1\101"+
    "\42\0\1\102\7\0\1\103\60\0\1\104\5\0\1\105"+
    "\43\0\1\106\3\0\1\107\52\0\1\110\35\0\1\111"+
    "\52\0\1\112\17\0\1\113\26\0\1\114\3\0\1\115"+
    "\14\0\1\116\6\0\1\117\37\0\1\120\1\0\1\121"+
    "\33\0\1\122\61\0\1\123\34\0\5\41\33\0\1\124"+
    "\1\41\1\0\4\42\1\43\52\42\1\43\3\42\5\125"+
    "\35\42\1\125\2\45\1\0\50\45\10\0\5\126\46\0"+
    "\5\127\34\0\1\41\11\0\5\127\33\0\1\124\1\41"+
    "\23\0\1\130\72\0\1\131\32\0\1\132\51\0\1\133"+
    "\56\0\1\134\52\0\1\135\62\0\1\136\56\0\1\137"+
    "\43\0\1\140\1\0\1\141\6\0\1\142\32\0\1\143"+
    "\71\0\1\144\31\0\1\145\10\0\1\146\6\0\1\147"+
    "\46\0\1\150\44\0\1\151\55\0\1\152\60\0\1\153"+
    "\47\0\1\154\52\0\1\155\56\0\1\156\1\157\37\0"+
    "\1\160\72\0\1\161\36\0\1\162\65\0\1\163\40\0"+
    "\1\164\60\0\1\132\42\0\1\165\42\0\1\166\57\0"+
    "\1\167\47\0\1\170\60\0\1\171\5\0\1\172\1\0"+
    "\1\173\43\0\1\174\37\0\1\175\100\0\1\176\47\0"+
    "\1\177\45\0\1\200\43\0\1\201\45\0\1\202\62\0"+
    "\1\203\5\0\1\204\35\0\1\205\37\0\5\41\34\0"+
    "\1\41\1\0\4\42\1\43\3\42\5\206\35\42\1\206"+
    "\23\0\1\207\56\0\1\210\55\0\1\211\41\0\1\212"+
    "\74\0\1\213\50\0\1\214\45\0\1\215\35\0\1\216"+
    "\52\0\1\217\3\0\1\220\56\0\1\221\46\0\1\222"+
    "\50\0\1\223\67\0\1\224\55\0\1\225\52\0\1\226"+
    "\34\0\1\227\62\0\1\230\62\0\1\231\32\0\1\232"+
    "\52\0\1\233\11\0\1\234\51\0\1\235\45\0\1\236"+
    "\55\0\1\237\43\0\1\240\62\0\1\241\42\0\1\242"+
    "\52\0\1\243\56\0\1\244\55\0\1\245\62\0\1\246"+
    "\33\0\1\247\52\0\1\250\66\0\1\251\32\0\1\252"+
    "\76\0\1\253\30\0\1\254\71\0\1\255\12\0\4\42"+
    "\1\43\3\42\5\256\35\42\1\256\40\0\1\257\46\0"+
    "\1\260\41\0\1\261\46\0\1\262\66\0\1\263\61\0"+
    "\1\264\52\0\1\265\52\0\1\266\30\0\1\267\65\0"+
    "\1\270\61\0\1\271\52\0\1\272\33\0\1\273\56\0"+
    "\1\274\61\0\1\275\54\0\1\276\37\0\1\277\67\0"+
    "\1\300\50\0\1\301\31\0\1\302\73\0\1\303\33\0"+
    "\1\304\50\0\1\305\56\0\1\306\72\0\1\307\51\0"+
    "\1\310\33\0\1\311\55\0\1\312\47\0\1\313\27\0"+
    "\4\42\1\43\2\42\1\314\43\42\42\0\1\315\27\0"+
    "\1\316\55\0\1\317\64\0\1\320\56\0\1\321\35\0"+
    "\1\322\46\0\1\323\52\0\1\324\56\0\1\325\54\0"+
    "\1\326\67\0\1\327\33\0\1\330\67\0\1\331\35\0"+
    "\1\332\71\0\1\333\42\0\1\334\43\0\1\335\52\0"+
    "\1\336\70\0\1\337\30\0\1\340\33\0\4\42\1\43"+
    "\3\42\1\341\1\342\41\42\34\0\1\343\41\0\1\344"+
    "\46\0\1\345\74\0\1\346\43\0\1\347\54\0\1\350"+
    "\56\0\1\351\61\0\1\352\37\0\1\353\56\0\1\354"+
    "\12\0\4\42\1\43\4\42\4\355\42\42\1\43\3\42"+
    "\3\355\40\42\27\0\1\356\46\0\1\357\50\0\1\360"+
    "\31\0\4\42\1\43\2\42\1\361\43\42\34\0\1\362"+
    "\41\0\1\363\27\0\4\42\1\43\3\42\1\364\2\365"+
    "\1\366\37\42\42\0\1\367\51\0\1\370\11\0\4\42"+
    "\1\43\4\42\4\371\42\42\1\43\3\42\5\371\42\42"+
    "\1\43\3\42\2\371\45\42\1\372\46\42";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8127];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\2\11\3\1\1\11\26\1\1\0"+
    "\1\11\1\0\1\1\2\0\1\1\1\11\3\0\1\1"+
    "\3\0\1\11\13\0\1\11\10\0\1\11\1\1\16\0"+
    "\2\1\1\11\1\0\3\11\24\0\1\11\1\0\2\11"+
    "\6\0\2\11\23\0\1\11\2\0\2\11\3\0\1\11"+
    "\3\0\2\11\1\0\1\11\6\0\3\11\6\0\1\11"+
    "\5\0\1\11\4\0\2\11\1\0\1\11\2\0\2\11"+
    "\4\0\1\11\4\0\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\3\0\5\11"+
    "\3\0\2\11\2\0\4\11\1\0\1\11\2\0\1\11"+
    "\7\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
private List<Token> listaCreate = new ArrayList<>();
private List<Token> listaTipoDato = new ArrayList<>();
private List<Token> listaEntero = new ArrayList<>();
private List<Token> listaDecimal = new ArrayList<>();
private List<Token> listaFecha = new ArrayList<>();
private List<Token> listaCadena = new ArrayList<>();
private List<Token> listaIdentificador = new ArrayList<>();
private List<Token> listaBooleano = new ArrayList<>();
private List<Token> listaAgregacion = new ArrayList<>();
private List<Token> listaSignos = new ArrayList<>();
private List<Token> listaAritmeticos = new ArrayList<>();
private List<Token> listaRacionales = new ArrayList<>();
private List<Token> listaLogicos = new ArrayList<>();
private List<Token> listaComentarios = new ArrayList<>();
private List<Token> listaErrores = new ArrayList<>();
private List<List<Token>> listaTokens = new ArrayList();

public void addListCreate(String token) {
        listaCreate.add(new Token(token, yyline, yycolumn,"create", (int) yychar));
}
public void addListTipoDato(String token) {
        listaTipoDato.add(new Token(token, yyline, yycolumn,"TipoDato", (int) yychar));
}

public void addListEntero(String token) {
        listaEntero.add(new Token(token, yyline, yycolumn,"Entero", (int) yychar));
}

public void addListDecimal(String token){
        listaDecimal.add(new Token(token, yyline, yycolumn,"Decimal", (int) yychar));
}

public void addListFecha(String token){
        listaFecha.add(new Token(token, yyline, yycolumn,"Fecha", (int) yychar));
}

public void addListCadena(String token){
        listaCadena.add(new Token(token, yyline, yycolumn,"Cadena", (int) yychar));
}

public void addListIdentificador(String token){
        listaIdentificador.add(new Token(token, yyline, yycolumn,"Identificador", (int) yychar));
}

public void addListBooleano(String token){
        listaBooleano.add(new Token(token, yyline, yycolumn,"Booleano", (int) yychar));
}

public void addListAgregacion(String token){
        listaAgregacion.add(new Token(token, yyline, yycolumn,"Agregacion", (int) yychar));
}

public void addListSignos(String token){
        listaSignos.add(new Token(token, yyline, yycolumn,"Signos", (int) yychar));
}

public void addListAritmeticos(String token){
        listaAritmeticos.add(new Token(token, yyline, yycolumn,"Aritmeticos", (int) yychar));
}

public void addListRacionales(String token){
        listaRacionales.add(new Token(token, yyline, yycolumn,"Racionales", (int) yychar));
}

public void addListLogicos(String token){
        listaLogicos.add(new Token(token, yyline, yycolumn,"Logicos", (int) yychar));
}

public void addListComentario(String token){
        listaComentarios.add(new Token(token, yyline, yycolumn,"Comentario", (int) yychar));
}

public void addListaErrores(String token){
        listaErrores.add(new Token(token, yyline, yycolumn,"Error", (int) yychar));
}

public void addListaTokens(List<Token> lista){
        listaTokens.add(lista);
}

public List<List<Token>> getListaTokens() {
        return listaTokens;
}

public List<Token> getListaCreate() {
    return listaCreate;
}

public List<Token> getListaTipoDato() {
    return listaTipoDato;
}

public List<Token> getListaEntero() {
    return listaEntero;
}

public List<Token> getListaDecimal() {
    return listaDecimal;
}

public List<Token> getListaFecha() {
    return listaFecha;
}

public List<Token> getListaCadena() {
    return listaCadena;
}

public List<Token> getListaIdentificador() {
    return listaIdentificador;
}

public List<Token> getListaBooleano() {
    return listaBooleano;
}

public List<Token> getListaAgregacion() {
    return listaAgregacion;
}

public List<Token> getListaSignos() {
    return listaSignos;
}

public List<Token> getListaAritmeticos() {
    return listaAritmeticos;
}

public List<Token> getListaRacionales() {
    return listaRacionales;
}

public List<Token> getListaLogicos() {
    return listaLogicos;
}

public List<Token> getListaComentarios() {
    return listaComentarios;
}

public List<Token> getListaErrores() {
    return listaErrores;
}

public int getLinea() {
        return yyline;
}

public int getColumna() {
        return yycolumn;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error:"+yytext());
                     addListaErrores("ERROR>> Linea: "+yyline + ", columna: "+ yycolumn+", Token -> "+yytext());
            }
          // fall through
          case 66: break;
          case 2:
            { /* Ignore */
            }
          // fall through
          case 67: break;
          case 3:
            { System.out.print(yytext());
            }
          // fall through
          case 68: break;
          case 4:
            { addListSignos(yytext()); System.out.println("SIGNO: " + yytext());
            }
          // fall through
          case 69: break;
          case 5:
            { addListAritmeticos(yytext()); System.out.println("ARITMETICO: " + yytext());
            }
          // fall through
          case 70: break;
          case 6:
            { addListEntero(yytext()); System.out.println("ENTERO: " + yytext());
            }
          // fall through
          case 71: break;
          case 7:
            { addListRacionales(yytext()); System.out.println("RACIONAL: " + yytext());
            }
          // fall through
          case 72: break;
          case 8:
            { addListRacionales(yytext()); System.out.println("SIGNO: " + yytext());
            }
          // fall through
          case 73: break;
          case 9:
            { addListIdentificador(yytext()); System.out.println("IDENTIFICADOR: "+yytext());
            }
          // fall through
          case 74: break;
          case 10:
            { addListCadena(yytext()); System.out.println("CADENA: " + yytext());
            }
          // fall through
          case 75: break;
          case 11:
            { addListComentario(yytext()); System.out.println("COMENTARIO: " + yytext());
            }
          // fall through
          case 76: break;
          case 12:
            { addListCreate(yytext()); System.out.println("AS: " + yytext());
            }
          // fall through
          case 77: break;
          case 13:
            { addListCreate(yytext()); System.out.println("BY: " + yytext());
            }
          // fall through
          case 78: break;
          case 14:
            { addListCreate(yytext()); System.out.println("IF: " + yytext());
            }
          // fall through
          case 79: break;
          case 15:
            { addListCreate(yytext()); System.out.println("ON: " + yytext());
            }
          // fall through
          case 80: break;
          case 16:
            { addListLogicos(yytext()); System.out.println("LOGICO: " + yytext());
            }
          // fall through
          case 81: break;
          case 17:
            { addListDecimal(yytext()); System.out.println("DECIMAL: " + yytext());
            }
          // fall through
          case 82: break;
          case 18:
            { addListCreate(yytext()); System.out.println("ADD: " + yytext());
            }
          // fall through
          case 83: break;
          case 19:
            { addListCreate(yytext()); System.out.println("ASC: " + yytext());
            }
          // fall through
          case 84: break;
          case 20:
            { addListAgregacion(yytext()); System.out.println("AVG: " + yytext());
            }
          // fall through
          case 85: break;
          case 21:
            { addListCreate(yytext()); System.out.println("KEY: " + yytext());
            }
          // fall through
          case 86: break;
          case 22:
            { addListAgregacion(yytext()); System.out.println("MAX: " + yytext());
            }
          // fall through
          case 87: break;
          case 23:
            { addListAgregacion(yytext()); System.out.println("MIN: " + yytext());
            }
          // fall through
          case 88: break;
          case 24:
            { addListCreate(yytext()); System.out.println("SET: " + yytext());
            }
          // fall through
          case 89: break;
          case 25:
            { addListAgregacion(yytext()); System.out.println("SUM: " + yytext());
            }
          // fall through
          case 90: break;
          case 26:
            { addListTipoDato(yytext()); System.out.println("DATE: " + yytext());
            }
          // fall through
          case 91: break;
          case 27:
            { addListCreate(yytext()); System.out.println("DESC: " + yytext());
            }
          // fall through
          case 92: break;
          case 28:
            { addListCreate(yytext()); System.out.println("DROP: " + yytext());
            }
          // fall through
          case 93: break;
          case 29:
            { addListCreate(yytext()); System.out.println("FROM: " + yytext());
            }
          // fall through
          case 94: break;
          case 30:
            { addListCreate(yytext()); System.out.println("INTO: " + yytext());
            }
          // fall through
          case 95: break;
          case 31:
            { addListCreate(yytext()); System.out.println("JOIN: " + yytext());
            }
          // fall through
          case 96: break;
          case 32:
            { addListCreate(yytext()); System.out.println("NULL: " + yytext());
            }
          // fall through
          case 97: break;
          case 33:
            { addListTipoDato(yytext()); System.out.println("TEXT: " + yytext());
            }
          // fall through
          case 98: break;
          case 34:
            { addListBooleano(yytext()); System.out.println("TRUE: " + yytext());
            }
          // fall through
          case 99: break;
          case 35:
            { addListCreate(yytext()); System.out.println("TYPE: " + yytext());
            }
          // fall through
          case 100: break;
          case 36:
            { addListCreate(yytext()); System.out.println("ALTER: " + yytext());
            }
          // fall through
          case 101: break;
          case 37:
            { addListAgregacion(yytext()); System.out.println("COUNT: " + yytext());
            }
          // fall through
          case 102: break;
          case 38:
            { addListCreate(yytext()); System.out.println("EXIST: " + yytext());
            }
          // fall through
          case 103: break;
          case 39:
            { addListBooleano(yytext()); System.out.println("FALSE: " + yytext());
            }
          // fall through
          case 104: break;
          case 40:
            { addListCreate(yytext()); System.out.println("GROUP: " + yytext());
            }
          // fall through
          case 105: break;
          case 41:
            { addListCreate(yytext()); System.out.println("LIMIT: " + yytext());
            }
          // fall through
          case 106: break;
          case 42:
            { addListCreate(yytext()); System.out.println("ORDER: " + yytext());
            }
          // fall through
          case 107: break;
          case 43:
            { addListCreate(yytext()); System.out.println("TABLE: " + yytext());
            }
          // fall through
          case 108: break;
          case 44:
            { addListCreate(yytext()); System.out.println("WHERE: " + yytext());
            }
          // fall through
          case 109: break;
          case 45:
            { addListTipoDato(yytext()); System.out.println("BIGINT: " + yytext());
            }
          // fall through
          case 110: break;
          case 46:
            { addListCreate(yytext()); System.out.println("COLUMN: " + yytext());
            }
          // fall through
          case 111: break;
          case 47:
            { addListCreate(yytext()); System.out.println("CREATE: " + yytext());
            }
          // fall through
          case 112: break;
          case 48:
            { addListCreate(yytext()); System.out.println("DELETE: " + yytext());
            }
          // fall through
          case 113: break;
          case 49:
            { addListCreate(yytext()); System.out.println("INSERT: " + yytext());
            }
          // fall through
          case 114: break;
          case 50:
            { addListCreate(yytext()); System.out.println("SELECT: " + yytext());
            }
          // fall through
          case 115: break;
          case 51:
            { addListTipoDato(yytext()); System.out.println("SERIAL: " + yytext());
            }
          // fall through
          case 116: break;
          case 52:
            { addListCreate(yytext()); System.out.println("UNIQUE: " + yytext());
            }
          // fall through
          case 117: break;
          case 53:
            { addListCreate(yytext()); System.out.println("UPDATE: " + yytext());
            }
          // fall through
          case 118: break;
          case 54:
            { addListCreate(yytext()); System.out.println("VALUES: " + yytext());
            }
          // fall through
          case 119: break;
          case 55:
            { addListTipoDato(yytext()); System.out.println("BOOLEAN: " + yytext());
            }
          // fall through
          case 120: break;
          case 56:
            { addListCreate(yytext()); System.out.println("CASCADE: " + yytext());
            }
          // fall through
          case 121: break;
          case 57:
            { addListTipoDato(yytext()); System.out.println("DECIMAL: " + yytext());
            }
          // fall through
          case 122: break;
          case 58:
            { addListCreate(yytext()); System.out.println("FOREIGN: " + yytext());
            }
          // fall through
          case 123: break;
          case 59:
            { addListTipoDato(yytext()); System.out.println("INTEGER: " + yytext());
            }
          // fall through
          case 124: break;
          case 60:
            { addListCreate(yytext()); System.out.println("PRIMARY: " + yytext());
            }
          // fall through
          case 125: break;
          case 61:
            { addListTipoDato(yytext()); System.out.println("VARCHAR: " + yytext());
            }
          // fall through
          case 126: break;
          case 62:
            { addListCreate(yytext()); System.out.println("DATABASE: " + yytext());
            }
          // fall through
          case 127: break;
          case 63:
            { addListCreate(yytext()); System.out.println("CONSTRAINT: " + yytext());
            }
          // fall through
          case 128: break;
          case 64:
            { addListCreate(yytext()); System.out.println("REFERENCES: " + yytext());
            }
          // fall through
          case 129: break;
          case 65:
            { addListFecha(yytext()); System.out.println("FECHA: " + yytext());
            }
          // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexico scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexico(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
