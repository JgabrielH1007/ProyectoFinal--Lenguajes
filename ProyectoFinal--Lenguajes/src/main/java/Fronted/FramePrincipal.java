/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Fronted;

import Backend.AnalizadorLexico;
import Backend.AnalizadorSintactico;
import Backend.GeneradorGraficos;
import Backend.ReporteDeTablas;
import Backend.ReporteErroresLexico;
import Backend.ReporteModificaciones;
import Backend.ReporteOperaciones;
import Backend.Token;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author gabrielh
 */
public class FramePrincipal extends javax.swing.JFrame {

    private List<Token> listaCreate;
    private List<Token> listaTipoDato;
    private List<Token> listaEntero;
    private List<Token> listaDecimal;
    private List<Token> listaFecha;
    private List<Token> listaCadena;
    private List<Token> listaIdentificador;
    private List<Token> listaBooleano;
    private List<Token> listaAgregacion;
    private List<Token> listaSignos;
    private List<Token> listaAritmeticos;
    private List<Token> listaRacionales;
    private List<Token> listaLogicos;
    private List<Token> listaComentarios;
    private List<Token> listaErrores;
    private boolean lexicoCorrecto;
    private File archivoActual = null;
    private AnalizadorSintactico analizador;

    /**
     * Creates new form FramePrincipal
     */
    public FramePrincipal() {
        initComponents();
        jtpEditor.setEnabled(false);
        // Agregar CaretListener para actualizar fila y columna
        jtpEditor.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent e) {
                actualizarFilaColumna(e);
            }
        });
    }

    private void actualizarFilaColumna(CaretEvent e) {
        try {
            // Obtener la posición del caret en el JTextPane
            int pos = e.getDot(); // Obtener la posición actual del caret

            // Obtener el documento y el texto actual
            Document doc = jtpEditor.getDocument();
            String text = doc.getText(0, doc.getLength());

            // Contar las líneas en el texto
            int lineCount = 0;
            int columnCount = 0;

            // Recorrer el texto hasta la posición del caret para contar líneas y columnas
            for (int i = 0; i < pos; i++) {
                if (text.charAt(i) == '\n') {
                    lineCount++;
                    columnCount = 0; // Reiniciar el contador de columnas en una nueva línea
                } else {
                    columnCount++;
                }
            }

            // Mostrar el número de fila y columna, ambos comenzando desde 0
            filaColumna.setText("Fila: " + lineCount + " Columna: " + columnCount);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtpEditor = new javax.swing.JTextPane();
        jbtAnalizar = new javax.swing.JButton();
        jbtGenerar = new javax.swing.JButton();
        filaColumna = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        subirArchivo = new javax.swing.JMenuItem();
        crearArchivo = new javax.swing.JMenuItem();
        guardarArchivo = new javax.swing.JMenuItem();
        guardarComo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtpEditor.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N
        jScrollPane1.setViewportView(jtpEditor);

        jbtAnalizar.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N
        jbtAnalizar.setText("Analizar...");
        jbtAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAnalizarActionPerformed(evt);
            }
        });

        jbtGenerar.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N
        jbtGenerar.setText("Generar Diagrama...");
        jbtGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtGenerarActionPerformed(evt);
            }
        });

        filaColumna.setFont(new java.awt.Font("Liberation Serif", 0, 18)); // NOI18N
        filaColumna.setText("Fila: . Columna: .");

        jMenu1.setText("Archivo");
        jMenu1.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N

        subirArchivo.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N
        subirArchivo.setText("Subir archivo...");
        subirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subirArchivoActionPerformed(evt);
            }
        });
        jMenu1.add(subirArchivo);

        crearArchivo.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N
        crearArchivo.setText("Crear archivo...");
        crearArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearArchivoActionPerformed(evt);
            }
        });
        jMenu1.add(crearArchivo);

        guardarArchivo.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N
        guardarArchivo.setText("Guardar archivo...");
        guardarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarArchivoActionPerformed(evt);
            }
        });
        jMenu1.add(guardarArchivo);

        guardarComo.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N
        guardarComo.setText("Guardar como...");
        guardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarComoActionPerformed(evt);
            }
        });
        jMenu1.add(guardarComo);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reportes");
        jMenu2.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N

        jMenuItem4.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N
        jMenuItem4.setText("Reporte Lexico");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N
        jMenuItem5.setText("Reporte Sintactico");
        jMenu2.add(jMenuItem5);

        jMenuItem1.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N
        jMenuItem1.setText("Reporte de tablas");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem2.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N
        jMenuItem2.setText("Reporte de tablas modificadas");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setFont(new java.awt.Font("Liberation Serif", 0, 15)); // NOI18N
        jMenuItem3.setText("Reporte de operaciones");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(filaColumna)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtGenerar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtAnalizar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filaColumna)
                    .addComponent(jbtGenerar)
                    .addComponent(jbtAnalizar))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtGenerarActionPerformed
        // TODO add your handling code here:
        analizar();
        if (analizador.isEstructuraDataBase() == true && analizador.isEstructuraTablas() == true && analizador.isEstructuraModificadores() == true
                && analizador.isEstructuraInsercion() == true && analizador.isEstructuraLectura() == true && analizador.isEstructuraActualizacion() == true
                && analizador.isEstructuraEliminacion() == true) {
            GeneradorGraficos generador = new GeneradorGraficos();
            generador.generarGraficos(jtpEditor.getText());
        } else {
            JOptionPane.showMessageDialog(null, "Se ha detectado un error Sintactico, no se puede generar diagrama.", "Error Sintactico", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jbtGenerarActionPerformed

    private void jbtAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAnalizarActionPerformed
        // TODO add your handling code here:
        analizar();
    }//GEN-LAST:event_jbtAnalizarActionPerformed

    private void subirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subirArchivoActionPerformed
        // TODO add your handling code here:
        cargarArchivo();
    }//GEN-LAST:event_subirArchivoActionPerformed

    private void crearArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearArchivoActionPerformed
        // TODO add your handling code here:
        crearArchivo();
    }//GEN-LAST:event_crearArchivoActionPerformed

    private void guardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarArchivoActionPerformed
        // TODO add your handling code here:
        guardarArchivo();
    }//GEN-LAST:event_guardarArchivoActionPerformed

    private void guardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarComoActionPerformed
        // TODO add your handling code here:
        guardarComo();
    }//GEN-LAST:event_guardarComoActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        /* Create and display the form */
        if (!listaErrores.isEmpty()) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    new ReporteErroresLexico(listaErrores).setVisible(true);
                }
            });
        }else{
            JOptionPane.showMessageDialog(null, "No se ha detectado ningun error o no se ha analizado", "Error Léxico", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        analizar();
        if (analizador.isEstructuraDataBase() == true && analizador.isEstructuraTablas() == true && analizador.isEstructuraModificadores() == true
                && analizador.isEstructuraInsercion() == true && analizador.isEstructuraLectura() == true && analizador.isEstructuraActualizacion() == true
                && analizador.isEstructuraEliminacion() == true) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    new ReporteDeTablas(jtpEditor.getText()).setVisible(true);
                }
            });
        } else {
            JOptionPane.showMessageDialog(null, "Se ha detectado un error Sintactico.", "Error sintactico", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        analizar();
        if (analizador.isEstructuraDataBase() == true && analizador.isEstructuraTablas() == true && analizador.isEstructuraModificadores() == true
                && analizador.isEstructuraInsercion() == true && analizador.isEstructuraLectura() == true && analizador.isEstructuraActualizacion() == true
                && analizador.isEstructuraEliminacion() == true) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    new ReporteModificaciones(jtpEditor.getText()).setVisible(true);
                }
            });
        } else {
            JOptionPane.showMessageDialog(null, "Se ha detectado un error Sintactico.", "Error sintactico", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        analizar();
        if (analizador.isEstructuraDataBase() == true && analizador.isEstructuraTablas() == true && analizador.isEstructuraModificadores() == true
                && analizador.isEstructuraInsercion() == true && analizador.isEstructuraLectura() == true && analizador.isEstructuraActualizacion() == true
                && analizador.isEstructuraEliminacion() == true) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    new ReporteOperaciones(jtpEditor.getText()).setVisible(true);
                }
            });
        } else {
            JOptionPane.showMessageDialog(null, "Se ha detectado un error Sintactico.", "Error sintacico", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    public void analizar() {
        String entrada = jtpEditor.getText();
        AnalizadorLexico analizadorLexico = new AnalizadorLexico(new StringReader(entrada));

        try {
            StyledDocument doc = jtpEditor.getStyledDocument();

            // Definición de los colores
            SimpleAttributeSet azul = new SimpleAttributeSet();
            StyleConstants.setForeground(azul, Color.BLUE);

            SimpleAttributeSet verde = new SimpleAttributeSet();
            StyleConstants.setForeground(verde, Color.GREEN);

            SimpleAttributeSet morado = new SimpleAttributeSet();
            StyleConstants.setForeground(morado, new Color(75, 0, 130));

            SimpleAttributeSet naranja = new SimpleAttributeSet();
            StyleConstants.setForeground(naranja, Color.ORANGE);

            SimpleAttributeSet amarillo = new SimpleAttributeSet();
            StyleConstants.setForeground(amarillo, Color.YELLOW);

            // Nuevo color fucsia
            SimpleAttributeSet fucsia = new SimpleAttributeSet();
            StyleConstants.setForeground(fucsia, new Color(255, 0, 255)); // Fucsia (RGB: 255, 0, 255)

            SimpleAttributeSet negro = new SimpleAttributeSet();
            StyleConstants.setForeground(negro, Color.BLACK);

            SimpleAttributeSet gris = new SimpleAttributeSet();
            StyleConstants.setForeground(gris, Color.GRAY);

            // Limpiar estilos previos
            doc.setCharacterAttributes(0, entrada.length(), new SimpleAttributeSet(), true);

            // Analiza el texto y llena las listas de tokens
            while (analizadorLexico.yylex() != AnalizadorLexico.YYEOF) {
            }

            // Obtener listas de tokens
            listaCreate = analizadorLexico.getListaCreate();
            listaTipoDato = analizadorLexico.getListaTipoDato();
            listaEntero = analizadorLexico.getListaEntero();
            listaDecimal = analizadorLexico.getListaDecimal();
            listaFecha = analizadorLexico.getListaFecha();
            listaCadena = analizadorLexico.getListaCadena();
            listaIdentificador = analizadorLexico.getListaIdentificador();
            listaBooleano = analizadorLexico.getListaBooleano();
            listaAgregacion = analizadorLexico.getListaAgregacion();
            listaSignos = analizadorLexico.getListaSignos();
            listaAritmeticos = analizadorLexico.getListaAritmeticos();
            listaRacionales = analizadorLexico.getListaRacionales();
            listaLogicos = analizadorLexico.getListaLogicos();
            listaComentarios = analizadorLexico.getListaComentarios();

            // Aplicar los colores correspondientes
            pintarTokens(listaCreate, naranja, doc);
            pintarTokens(listaTipoDato, morado, doc);
            pintarTokens(listaEntero, azul, doc);
            pintarTokens(listaDecimal, azul, doc);
            pintarTokens(listaFecha, amarillo, doc);
            pintarTokens(listaCadena, verde, doc);
            pintarTokens(listaIdentificador, fucsia, doc);
            pintarTokens(listaBooleano, azul, doc);
            pintarTokens(listaAgregacion, azul, doc);
            pintarTokens(listaSignos, negro, doc);
            pintarTokens(listaAritmeticos, negro, doc);
            pintarTokens(listaRacionales, negro, doc);
            pintarTokens(listaLogicos, naranja, doc);
            pintarTokens(listaComentarios, gris, doc);

            listaErrores = analizadorLexico.getListaErrores();
            if (!listaErrores.isEmpty()) {
                lexicoCorrecto = false;
                JOptionPane.showMessageDialog(null, "Se ha detectado un error léxico. Por favor, revisa el reporte de errores para más detalles.", "Error Léxico", JOptionPane.ERROR_MESSAGE);
            } else {
                lexicoCorrecto = true;
                analizador = new AnalizadorSintactico();
                analizador.procesarEstructuras(entrada, listaCreate, listaIdentificador, listaTipoDato, listaSignos, listaEntero, listaAritmeticos, listaLogicos, listaCadena, listaFecha, listaDecimal, listaRacionales, listaAgregacion);
                if (analizador.isEstructuraDataBase() == true && analizador.isEstructuraTablas() == true && analizador.isEstructuraModificadores() == true
                        && analizador.isEstructuraInsercion() == true && analizador.isEstructuraLectura() == true && analizador.isEstructuraActualizacion() == true
                        && analizador.isEstructuraEliminacion() == true) {
                     JOptionPane.showMessageDialog(null, "Verificacion completa, todo esta bien estructurado.","VERIFICACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Se ha detectado un error Sintactico.", "Error sintactico", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void pintarTokens(List<Token> tokens, SimpleAttributeSet estilo, StyledDocument doc) {
        try {
            String text = doc.getText(0, doc.getLength());  // Obtener todo el texto del documento

            for (Token token : tokens) {
                int start = calcularPosicionInicial(token, text);  // Calcular la posición inicial basándose en line y column
                int length = token.getTexto().length();  // Longitud del token

                // Asegurarse de que la longitud no sea 0 y la posición es válida
                if (start >= 0 && length > 0) {
                    doc.setCharacterAttributes(start, length, estilo, true);  // Aplica el estilo al token completo
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Método para calcular la posición inicial en el documento a partir de las
     * líneas y columnas del token.
     */
    private int calcularPosicionInicial(Token token, String texto) {
        int line = token.getLine();   // Obtener la línea del token
        int column = token.getColumn();  // Obtener la columna del token
        int pos = 0;  // Posición inicial en el texto (que empezará en 0)

        // Recorremos el texto línea por línea hasta alcanzar la línea deseada
        int currentLine = 0;
        for (int i = 0; i < texto.length(); i++) {
            if (currentLine == line) {
                // Si estamos en la línea correcta, la posición es la columna en esa línea
                pos = i + column;
                break;
            }

            // Si encontramos un salto de línea, incrementamos el contador de líneas
            if (texto.charAt(i) == '\n') {
                currentLine++;
            }
        }

        return pos;
    }

    private void cargarArchivo() {
        jtpEditor.setEnabled(true);
        JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showOpenDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            archivoActual = fileChooser.getSelectedFile();
            try {
                String contenido = new String(Files.readAllBytes(archivoActual.toPath()));
                jtpEditor.setText(contenido);  // Mostrar el contenido en el editor
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al cargar el archivo", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void crearArchivo() {
        jtpEditor.setEnabled(true);
        jtpEditor.setText(""); // Limpiar el editor
        archivoActual = null; // No hay archivo asociado aún
    }

    private void guardarArchivo() {
        jtpEditor.setEnabled(true);
        if (archivoActual == null) {
            guardarComo(); // Si es un archivo nuevo, usar "Guardar como"
        } else {
            guardarContenidoEnArchivo(archivoActual);
        }
    }

    private void guardarComo() {
        jtpEditor.setEnabled(true);
        JFileChooser fileChooser = new JFileChooser();
        int seleccion = fileChooser.showSaveDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            archivoActual = fileChooser.getSelectedFile();
            guardarContenidoEnArchivo(archivoActual);
        }
    }

    private void guardarContenidoEnArchivo(File archivo) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(archivo))) {
            writer.write(jtpEditor.getText()); // Guardar el contenido del editor en el archivo
            JOptionPane.showMessageDialog(this, "Archivo guardado exitosamente", "Guardar", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem crearArchivo;
    private javax.swing.JLabel filaColumna;
    private javax.swing.JMenuItem guardarArchivo;
    private javax.swing.JMenuItem guardarComo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtAnalizar;
    private javax.swing.JButton jbtGenerar;
    private javax.swing.JTextPane jtpEditor;
    private javax.swing.JMenuItem subirArchivo;
    // End of variables declaration//GEN-END:variables
}
